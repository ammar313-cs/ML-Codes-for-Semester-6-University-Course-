{\rtf1\ansi\ansicpg1252\cocoartf2707
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab560
\pard\pardeftab560\slleading20\partightenfactor0

\f0\fs26 \cf0 TSP hill climb\
\
cities = ['New York', 'Los Angeles', 'Chicago', 'Houston']\
distances = [    [0, 2789, 790, 1631],\
    [2789, 0, 1744, 1544],\
    [790, 1744, 0, 1085],\
    [1631, 1544, 1085, 0]\
]\'a0\
\
\
\
def my_hill_c11(cities,distance):\
    curr_route = list(range(len(cities)))\
    random.shuffle(curr_route)\
    curr_dist = calculate_distance(curr_route,distance)\
    \
    while True:\
        \
        neighborhood = [\
                        curr_route[:i] + \
            [curr_route[i+1], curr_route[i]] \
            + curr_route[i+2:] \
                        for i in range(len(cities)-1)\
                       ]\
        print(f'neighborhood:\{neighborhood\}\\n')\
        \
        neighborhood_distances = [\
            calculate_distance(route, distances) \
            for route in neighborhood\
        ]\
         \
        best_dis = min(neighborhood_distances)\
        \
        if best_dis  >= curr_dist:\
            break\
            \
        best_indx = neighborhood_distances.index(best_dis)\
        curr_route = neighborhood[best_indx]    \
        curr_dist = best_dis\
    \
    return curr_route , curr_dist\
        \
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 route, distance = my_hill_c11(cities, distances)\
print('\\nShortest route:', [cities[i] for i in route])\
print('\\nShortest distance:', distance)\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf0 \
\
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf0 \
root = Node(0, [\
    Node(5, [\
            Node(3, [\
            Node(9),\
            Node(8)\
            ]),\
    Node(6, [\
            Node(7),\
            Node(1)\
        ])\
    ]),\
    Node(2, [\
        Node(4, [\
            Node(2),\
            Node(0)\
        ]),\
        Node(3, [\
            Node(8),\
            Node(5)\
        ])\
    ])\
])\
\
\
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 from queue import PriorityQueue \
\
\
graph = \{'s':[('a',3),('b',2),('c',4)],\
    'a':[('d',1)],\
    'b':[('e',8),('f',7),('d',1)],\
    'c':[('e',1),('j',3)],\
    'd':[('f',1),('h',1)],\
    'e':[('g',1)],\
    'f':[('g',5)],\
    'h':[('g',1),('f',3)],\
    'j':[('e',2)],\
    'g':[]\}\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf0 \
\
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 \'97\'97\'97\'97\'97\'97\
Ucs\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 #for i in range(0,len(lis),2) good line of code for info\
'''def diction(lis):\
    ret_dic = \{i[0]:i[1] for i in lis\}\
    return ret_dic '''\
\
def diction(lis):\
    di  = \{\}\
\
    for i in lis:\
        name = i[0]\
        cost = i[1]\
        di[name] = cost\
    return di\
\
\
def my(x):\
    return x[1]\
\
\
diction(lis)\
\
def UCS(grpah1, goal):\
    \
    q = []\
    q.append(('s',0))\
    explored = []\
    \
    while len(q) > 0:\
        \
        print("Queue:",q)\
        node  = q.pop(0)\
        print('child poped:',node)\
        \
        if node[0] not in explored:\
            explored.append(node[0])\
        \
        if node[0] == goal:\
            return explored\
        \
        print("Explored:", explored)\
        \
        child = graph.get(node[0])\
        print('The children are:', child)\
        \
        for i in child:\
            print(i)\
            \
            cost =  i[1] + node[1]\
            name = i[0]\
            new = (name,cost)\
            \
            print('\{\}, parent cost(\{\})+ child cost(\{\}) = \{\}'.format(i,node[1],i[1],cost))\
            \
            if new[0] not in explored and new[0] not in diction(q):\
                \
                q.append(new)\
            \
            elif new[0] in explored and  new[0] in diction(q):\
                \
                old_data = diction(q)\
                old_cost = old_data[new[0]]\
                old_name = new[0]\
                \
                old = \{old_nmae,old_cost\}\
                \
                \
                if new[1] < old[1]:\
                    \
                    inde = q.index(old)\
                    q[inde] = new\
                else:\
                    pass\
                \
                \
                q = sorted(q, key = my)\
                print(50*'*')\
                \
UCS(graph,'g')\
\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\
Alphabeta\
\
from math import inf\
\
class Node:\
    \
    def __init__(self,value,children=[]):\
        self.value = value\
        self.children = children\
    \
    def istermeinal(self):\
        return len(self.children) == 0\
    \
    def getScore(self):\
        return self.value \
    \
    def getChildren(self):\
        return self.children \
    \
\
def min_max_prun(node,depth,alpha,beta,isMaximizing):\
    \
    if(depth) == 0 or node.istermeinal():\
        return node.getScore()\
    \
    if isMaximizing:\
        \
        maxVal = -inf\
        \
        for child in node.getChildren():\
            \
            val = min_max_prun(child,depth-1,alpha,beta,False)\
            maxVal = max(maxVal,val)\
            alpha = max(alpha,maxVal)\
            \
            if beta <= alpha:\
                break\
        return maxVal\
    \
    else:\
        \
        minVal = inf \
        \
        for child in node.getChildren():\
            \
            val = min_max_prun(child,depth-1,alpha,beta,True)\
            minVal = min(val,minVal)\
            beta = min(minVal,beta)\
            \
            if beta <= alpha:\
                break\
        return minVal\
\
\
\
best_score = min_max_prun(root,3,-inf,inf,True)\
print(f'Best Score: \{best_score\}')\
         \
    \
    \
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf0 \
}